services:
  # You can comment this webserver section if you want to use another webserver/proxy or test PeerTube in local
#  webserver:
#    image: chocobozzz/peertube-webserver:latest
#    env_file:
#      - .env
#    ports:
#      - 80:80
#      - 443:443
#    # mount your custom nginx conf and your self-signed certs
#    volumes:
#      - ./nginx/peertube.template:/etc/nginx/conf.d/peertube.template:ro
#      - ./nginx/ssl/tube.crt:/etc/nginx/ssl/tube.crt:ro
#      - ./nginx/ssl/tube.key:/etc/nginx/ssl/tube.key:ro
#      # - ./assets:/var/www/peertube/peertube-latest/client/dist
#      - ./mnt/unified/media/peertube:/var/www/peertube/storage
#    depends_on:
#      - peertube
#    networks:
#      - frontend
#    restart: always
  peertube:
    # If you don't want to use the official image and build one from sources:
    # build:
    #   context: .
    #   dockerfile: ./support/docker/production/Dockerfile.bookworm
    image: chocobozzz/peertube:production-bookworm
    # Use a static IP for this container because nginx does not handle proxy host change without reload
    # This container could be restarted on crash or until the postgresql database is ready for connection
    networks:
      - frontend
      - backend
    env_file:
      - .env
    ports:
      # - "1935:1935" # Comment if you don't want to use the live feature
      - 9000:9000 # Uncomment if you use another webserver/proxy or test PeerTube in local, otherwise not suitable for production
    volumes:
      # Remove the following line if you want to use another webserver/proxy or test PeerTube in local
      #- ./assets:/app/client/dist
      - /mnt/unified/media/peertube:/data
      - ./config:/config
    depends_on:
      - postgres
      - redis
      - postfix
    restart: unless-stopped
  postgres:
    image: postgres:13-alpine
    env_file:
      - .env
    volumes:
      - ./db:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend
      - frontend
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U $${POSTGRES_USER:-postgres}
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:6-alpine
    command: redis-server
    volumes:
      - ./redis:/data
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 10s
      timeout: 5s
      retries: 5
  postfix:
    image: mwader/postfix-relay
    env_file:
      - .env
    volumes:
      - ./opendkim-keys:/etc/opendkim/keys
    restart: unless-stopped
    networks:
      - backend
networks:
  backend:
    external: true
  frontend:
    external: true
